{"ast":null,"code":"var _jsxFileName = \"/home/unnati/Downloads/react-project/react-assignment/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { userList } from './userData';\nimport Navbar from './components/Navbar';\nimport UserGrid from './components/UserGrid';\nimport EditModal from './components/EditModal'; // <-- Import the new modal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // The user list is now in state, so it can be changed\n  const [users, setUsers] = useState(userList);\n\n  // State for managing the modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n\n  // --- Logic Functions ---\n\n  const handleLike = id => {\n    setUsers(currentUsers => currentUsers.map(user => user.id === id ? {\n      ...user,\n      isLiked: !user.isLiked\n    } : user));\n  };\n  const handleDelete = id => {\n    setUsers(currentUsers => currentUsers.filter(user => user.id !== id));\n  };\n\n  // This function is called by UserCard to open the modal\n  const handleEditOpen = user => {\n    setEditingUser(user);\n    setIsModalOpen(true);\n  };\n\n  // This function is called by the modal to close it\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setEditingUser(null);\n  };\n\n  // This function is called by the modal to save changes\n  const handleEditSave = updatedUser => {\n    setUsers(currentUsers => currentUsers.map(user => user.id === updatedUser.id ? updatedUser : user));\n    handleModalClose(); // Close the modal after saving\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content-area\",\n      children: /*#__PURE__*/_jsxDEV(UserGrid, {\n        users: users,\n        onLike: handleLike,\n        onDelete: handleDelete,\n        onEdit: handleEditOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditModal, {\n      isOpen: isModalOpen,\n      user: editingUser,\n      onClose: handleModalClose,\n      onSave: handleEditSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cEG/XetjzFO24irdJGJNI8r/0lQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","userList","Navbar","UserGrid","EditModal","jsxDEV","_jsxDEV","App","_s","users","setUsers","isModalOpen","setIsModalOpen","editingUser","setEditingUser","handleLike","id","currentUsers","map","user","isLiked","handleDelete","filter","handleEditOpen","handleModalClose","handleEditSave","updatedUser","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLike","onDelete","onEdit","isOpen","onClose","onSave","_c","$RefreshReg$"],"sources":["/home/unnati/Downloads/react-project/react-assignment/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { userList } from './userData'; \nimport Navbar from './components/Navbar';\nimport UserGrid from './components/UserGrid';\nimport EditModal from './components/EditModal'; // <-- Import the new modal\n\nfunction App() {\n  // The user list is now in state, so it can be changed\n  const [users, setUsers] = useState(userList);\n  \n  // State for managing the modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n\n  // --- Logic Functions ---\n\n  const handleLike = (id) => {\n    setUsers(currentUsers => \n      currentUsers.map(user =>\n        user.id === id ? { ...user, isLiked: !user.isLiked } : user\n      )\n    );\n  };\n\n  const handleDelete = (id) => {\n    setUsers(currentUsers =>\n      currentUsers.filter(user => user.id !== id)\n    );\n  };\n  \n  // This function is called by UserCard to open the modal\n  const handleEditOpen = (user) => {\n    setEditingUser(user);\n    setIsModalOpen(true);\n  };\n\n  // This function is called by the modal to close it\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setEditingUser(null);\n  };\n\n  // This function is called by the modal to save changes\n  const handleEditSave = (updatedUser) => {\n    setUsers(currentUsers =>\n      currentUsers.map(user =>\n        user.id === updatedUser.id ? updatedUser : user\n      )\n    );\n    handleModalClose(); // Close the modal after saving\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Navbar />\n      \n      <main className=\"content-area\">\n        <UserGrid \n          users={users} \n          onLike={handleLike}\n          onDelete={handleDelete}\n          onEdit={handleEditOpen}\n        />\n      </main>\n\n      {/* Render the modal component. It's hidden by default. */}\n      <EditModal\n        isOpen={isModalOpen}\n        user={editingUser}\n        onClose={handleModalClose}\n        onSave={handleEditSave}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}